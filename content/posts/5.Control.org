#+title: "5.Control"
#+:date: 2020-12-21T11:23:20+08:00
#+:draft: true

* Control

** 条件Conditionals

最简单的是if,其余的条件都是根据if所构造的。

when:它接受一个测试表达式（test expression）与一个代码主体。若测试表达式求值返回真时，则对主体求值。
unless ；它接受相同的实参，但仅在测试表达式返回假时，才对主体求值。

cond 有两个新的优点：允许多个条件判断，与每个条件相关的代码隐含在 progn 里。
总得来说呢， cond 接受零个或多个实参。每一个实参必须是一个具有条件式，伴随着零个或多个表达式的列表。当 cond 表达式被求值时，测试条件式依序求值，直到某个测试条件式返回真才停止。当返回真时，与其相关联的表达式会被依序求值，而最后一个返回的数值，会作为 cond 的返回值。如果符合的条件式之后没有表达式的话：则会返回条件式的值。
(defun our-member (obj lst)
  (cond ((atom lst) nil)
        ((eql (car lst) obj) lst)
        (t (our-member obj (cdr lst)))))
最后一个t,表示条件肯定为真，作为缺省的表达式。

如果没有子句符合时，则cond返回nil,但利用nil作为返回是一种很差的风格。

case： 当你想要把一个数值与一系列的常量比较时，有 case 可以用。我们可以使用 case 来定义一个函数，返回每个月份中的天数：

(defun month-length (mon)
  (case mon
    ((jan mar may jul aug oct dec) 31)
    ((apr jun sept nov) 30)
    (feb (if (leap-year) 29 28))
    (otherwise "unknown month")))
一个 case 表达式由一个实参开始，此实参会被拿来与每个子句的键值做比较。接着是零个或多个子句，每个子句由一个或一串键值开始，跟随着零个或多个表达式。键值被视为常量；它们不会被求值。第一个参数的值被拿来与子句中的键值做比较 (使用 eql )。如果匹配时，子句剩余的表达式会被求值，并将最后一个求值作为 case 的返回值。

缺省子句的键值可以是 t 或 otherwise 。
如果没有子句符合时，或是子句只包含键值时，则 case 返回 nil 。

typecase 宏与 case 相似，除了每个子句中的键值应为类型修饰符 (type specifiers)，以及第一个实参与键值比较的函数使用 typep 而不是 eql

** 迭代

最基本的迭代操作符是do。
do 的第一个参数必须是说明变量规格的列表，列表可以是如下形式：
(variable  initial  update)
initial 与 update 形式是选择性的。若 update 形式忽略时，每次迭代时不会更新变量。若 initial 形式也忽略时，变量会使用 nil 来初始化。

同时也存在类似let*的do*。


要迭代一个列表的元素，我们可以使用 dolist :

> (dolist (x '(a b c d) 'done)
    (format t "~A " x))
A B C D
DONE

dotimes ，给定某个 n ，将会从整数 0 ，迭代至 n-1 :

(dotimes (x 5 x)
  (format t "~A " x))
0 1 2 3 4
5

dolist 与 dotimes 初始列表的第三个表达式皆可省略，省略时为 ``nil 。注意该表达式可引用到迭代过程中的变量。

函数 mapc 和 mapcar 很像，但不会 cons 一个新列表作为返回值，所以使用的唯一理由是为了副作用。它们比 dolist 来得灵活，因为可以同时遍历多个列表：

> (mapc #'(lambda (x y)
          (format t "~A ~A  " x y))
      '(hip flip slip)
      '(hop flop slop))
HIP HOP  FLIP FLOP  SLIP SLOP
(HIP FLIP SLIP)
总是返回 mapc 的第二个参数。

** 多值

*** values 函数返回多个数值。它一个不少地返回你作为数值所传入的实参：

 > (values 'a nil (+ 2 4))
 A
 NIL
 6

 若只预期一个返回值时，第一个之外的值会被舍弃：

 > (let ((x (values 1 2)))
     x)
 1

***  要接收多个数值，我们使用 multiple-value-bind :
 > (multiple-value-bind (x y z) (values 1 2 3)
     (list x y z))
 (1 2 3)

 > (multiple-value-bind (x y z) (values 1 2)
     (list x y z))
 (1 2 NIL)
 如果变量的数量大于数值的数量，剩余的变量会是 nil 。如果数值的数量大于变量的数量，多余的值会被舍弃。

*** multiple-value-call 将多值作为实参传给第二个函数：

 > (multiple-value-call #'+ (values 1 2 3))
 6

***  还有一个函数是 multiple-value-list :

 > (multiple-value-list (values 'a 'b 'c))
 (A B C)
 看起来像是使用 #'list 作为第一个参数的来调用 multiple-value-call 。

** 中止Aborts

可以使用 return 在任何时候离开一个 block 。


一个 catch 表达式接受一个标签（tag），标签可以是任何类型的对象，伴随着一个表达式主体：

(defun super ()
  (catch 'abort
    (sub)
    (format t "We'll never see this.")))

(defun sub ()
  (throw 'abort 99))
表达式依序求值，就像它们是在 progn 里一样。在这段代码里的任何地方，一个带有特定标签的 throw 会导致 catch 表达式直接返回：

> (super)
99
一个带有给定标签的 throw ，为了要到达匹配标签的 catch ，会将控制权转移 (因此杀掉进程)给任何有标签的 catch 。如果没有一个 catch 符合欲匹配的标签时， throw 会产生一个错误。


调用 error 同时中断了执行，本来会将控制权转移到调用树（calling tree）的更高点，取而代之的是，它将控制权转移给 Lisp 错误处理器（error handler）。


有时候你想要防止代码被 throw 与 error 打断。借由使用 unwind-protect ，可以确保像是前述的中断，不会让你的程序停在不一致的状态。一个 unwind-protect 接受任何数量的实参，并返回第一个实参的值。然而即便是第一个实参的求值被打断时，剩下的表达式仍会被求值：

> (setf x 1)
1
> (catch 'abort
    (unwind-protect
      (throw 'abort 99)
      (setf x 2)))
99
> x
2
在这里，即便 throw 将控制权交回监测的 catch ， unwind-protect 确保控制权移交时，第二个表达式有被求值。无论何时，一个确切的动作要伴随着某种清理或重置时， unwind-protect 可能会派上用场。
