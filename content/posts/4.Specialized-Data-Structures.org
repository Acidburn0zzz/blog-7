#+title: "4.Specialized Data Structures"
#+:date: 2020-12-21T11:23:20+08:00
#+:draft: true

** Array

定义make-array： 2×3的数组
(setf arr (make-array '(2 3) :initial-element nil))

获取值：
(aref arr 0 0) 获取0,0的元素的值。

替换某个元素：
(setf (aref arr 0 0) 123)

字面常量的数组表示，使用#na语法，其中n是数组的维度：
#2a((b nil nil) (nil nil nil))

如果全局变量*print-array*为真(t)，则数组表示了#na。否则为类似：
CL-USER> arr
#<(SIMPLE-ARRAY T (2 3)) {1005C02AEF}>
而不是：
CL-USER> arr
#2A((NIL NIL NIL) (NIL NIL NIL))


一维数组：
(setf vec (make-array 4 :initial-element nil))
或者使用vector宏
(setf vec (vector "a" 'b 3))

存取：
 (svref vec 0)
（setf  (svref vec 0) 'abc）
其中sv代表简单向量。

** 字符和字符串

*** 字符
 字符用#\c表示， 比如字符a表示为#\a。

 函数 char-code 返回与字符相关的数字，而 code-char 返回与数字相关的字符。

 字符比较函数：char< （小于）， char<= （小于等于)， char= （等于)， char>= （大于等于) ， char> （大于)，以及 char/= （不同)。

*** 字符串

 由于字符串是字符 *向量* 所以序列和数组的函数也可以用在字符串上面：
(aref "abcd" 2) ==>#\c
或者使用更快的char函数获取对应元素
(char "abc" 1) ==> #\b

使用setf替换元素： (setf (char "abc" 1) #\k)。

创建格式化字符串：
(format nil "~A or ~A" "one" "two")
字符串拼接:
（concatenate 'string "not" "to worry"）接受一个特定类型的符号，和一个或多个序列。

** 序列Sequences

序列包含了：列表，向量(因此也包含字符串)。因此相应函数都可以应用到序列上：mirror? ,remove,length,subseq,reverse,sort,every,some等等。

通用取值函数elt,对任何序列都有效： (elt "abc" 1) 但是效率要低一些。

许多序列函数接受一个或多个，由下表所列的标准关键字参数：

参数	用途	缺省值
:key	应用至每个元素的函数	identity
:test	作来比较的函数	eql
:from-end	若为真，反向工作。	nil
:start	起始位置	0
:end	若有给定，结束位置。	nil

一个接受所有关键字参数的函数是 position ，返回序列中一个元素的位置，未找到元素时则返回 nil 。
要找到满足谓词的元素，其中谓词接受一个实参，我们使用 position-if 。它接受一个函数与序列，并返回第一个满足此函数的元素：

> (position-if #'oddp '(2 3 4 5))
1

find （接受全部关键字参数）与 find-if （接受除了 :test 之外的所有关键字参数）

另一个相关的函数是 remove-duplicates ，仅保留序列中每个元素的最后一次出现。

函数 reduce 用来把序列压缩成一个值。它至少接受两个参数，一个函数与序列。函数必须是接受两个实参的函数。

** 结构

定义结构使用defstruct:
(defstruct point x y)
point结构具有两个字段x和y.同时隐式的定义了make-point,point-p,copy-point,point-x,point-y函数。

可以定义时附上一个列表，含有字段名以及缺省表达式，来指定字段缺省值。
(defstruct polemic
  (type (progn
          (format t "What kind of polemic was it? ")
          (read)))
  (effect nil))

结构显示的方式也可以控制，以及结构自动产生的存取函数的字首。
(defstruct (point (:conc-name p)
                  (:print-function print-point))
  (x 0)
  (y 0))

(defun print-point (p stream depth)
  (format stream "#<~A, ~A>" (px p) (py p)))

:conc-name 关键字参数指定了要放在字段前面的名字，并用这个名字来生成存取函数。预设是 point- ；现在变成只有 p 。
:print-function 是在需要显示结构出来看时，指定用来打印结构的函数 ── 需要显示的情况比如，要在顶层显示时。这个函数需要接受三个实参：要被印出的结构，在哪里被印出，第三个参数通常可以忽略。


** 哈希表

当列表的长度大幅上升时，使用哈希表的速度比较快。

创建: make-hash-table
(setf hf (make-hash-table))

获取键值对应的值:
(gethash 'color ht) ==> NIL NIL(两个返回值，第一个值是与键值有关的数值，第二个值说明了哈希表是否含有任何用此键值来储存的数值:T或者NIL,NIL表示使用的预设值。)

赋值： (setf (gethash 'color ht) 'red)

存在哈希表的对象或键值可以是任何类型。

移除某个键值： (remhash 'color ht) 返回值说明了是否有词条被移除。

哈希表有一个迭代函数： maphash ，它接受两个实参，接受两个参数的函数以及哈希表。
